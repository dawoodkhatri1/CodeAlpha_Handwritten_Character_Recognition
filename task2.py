# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CvBxb4fSubh9sm9F5-W_Ro_o0WCab6QW

**Step 1: Downloading Libraries and checking whether it is installed or not**
"""

!pip install tensorflow keras

"""**Step 2: Importing Libraries**"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from tensorflow.keras.utils import to_categorical

"""**Step 3: Load and Preprocess Data**"""

# Load MNIST dataset
(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()

# Normalize the images
train_images = train_images / 255.0
test_images = test_images / 255.0

# Reshape the data
train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))
test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))

# Convert labels to categorical
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

"""**Step 4: Build the Convolutional Neural Network (CNN)**"""

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""**Step 5: Train the Model**"""

history = model.fit(train_images, train_labels, epochs=5,
                    validation_data=(test_images, test_labels))

"""**Step 6: Evaluate the Model**"""

test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print(f'Test accuracy: {test_acc}')

"""**Step 6: Visualize Training History**"""

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

"""**Step 8: Recognize Handwritten Characters**"""

def predict_and_display(image):

    if image.shape != (28, 28, 1):
        raise ValueError("Input image must be of shape (28, 28, 1)")

    # Preprocess the image
    image = np.array(image).reshape((1, 28, 28, 1)) / 255.0

    # Predict the label
    prediction = model.predict(image)
    predicted_label = np.argmax(prediction)

    # Display the image and the predicted label
    plt.imshow(image.reshape(28, 28), cmap=plt.cm.binary)
    plt.title(f'Predicted Label: {predicted_label}')
    plt.axis('off')
    plt.show()

    return predicted_label

sample_index = 15
predicted_label = predict_and_display(test_images[sample_index])
print(f'Actual Label: {np.argmax(test_labels[sample_index])}')